{"version":3,"sources":["redux/reducers/order/actions.ts","redux/reducers/app/index.ts","redux/reducers/order/index.ts","models/order.ts","components/List/OrdersList.tsx","services/order.ts","hooks/useAppSelector.ts","hooks/useAppDispatch.ts","components/ListItem/OrderListItemAvatar.tsx","components/ListItem/sx.ts","components/ListItem/OrderListIconButton.tsx","components/ListItem/OrderListItem.tsx","components/List/sx.ts","components/List/OneList.tsx","redux/sagas/order/index.ts","redux/sagas/index.ts","redux/store/index.ts","data/cities.ts","components/Modals/sx.ts","components/Modals/OrderModal.tsx","utils/hasEmptyProperty.ts","App.tsx","index.tsx"],"names":["OrderActions","appSlice","createSlice","name","initialState","isModal","openedOrder","draggedOrder","reducers","setIsModal","state","payload","setOpenedOrder","setDraggedOrder","actions","selectApp","app","orderSlice","orders","setOrders","selectOrder","order","OrderStatus","createNewOrder","createAction","CREATE_NEW_ORDER","makeOrderInPreparation","MAKE_IN_PREPARATION_ORDER","makeDoneOrder","MAKE_DONE_ORDER","deleteOrder","DELETE_ORDER","changeOrder","CHANGE_ORDER","dragOrder","DRAG_ORDER","OrderListNames","OrderService","status","map","o","id","inputs","errors","description","city","address","key","useAppSelector","useSelector","useAppDispatch","useDispatch","OrderListItemAvatar","NEW","Avatar","variant","sx","bgcolor","red","IN_PREPARATION","yellow","green","styles","listItem","pr","zIndex","width","fontSize","display","justifyContent","flex","transform","WebkitTransform","position","iconButton","mr","OrderListIconButton","dispatch","IconButton","edge","onClick","OrderListItem","isMedium","ListItem","disablePadding","secondaryAction","draggable","onDragStart","e","onDragOver","preventDefault","onDrag","ListItemButton","ListItemAvatar","ListItemText","primary","secondary","date","listSubheader","listPaper","listGridItem","borderRight","OneList","items","Paper","square","elevation","List","ListSubheader","item","listStatusDictionary","DONE","OrdersList","dragOverHandler","dropOrderHandler","_","list","Box","p","listPaprt","Grid","container","onDrop","filter","className","spaceBetween","handleOrderDrag","handleOrderChange","handleOrder","orderSaga","select","put","changedOrder","type","setOrderStatus","Date","getTime","toString","toLocaleString","takeEvery","rootSaga","sagas","all","saga","spawn","call","console","log","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","run","cities","modalBox","border","boxShadow","maxWidth","top","left","header","textAlign","mb","form","flexWrap","input","flexBasis","statusSelect","button","my","mt","deleteButton","CreateOrderModal","useState","setInputs","setErrors","handleChange","target","value","handleModalClose","Modal","open","onClose","Typography","onSubmit","obj","hasEmptyProperty","getValidationErrors","style","TextField","error","label","margin","onChange","multiline","maxRows","FormControl","InputLabel","htmlFor","Select","MenuItem","Object","values","Button","size","color","App","isSmall","useMediaQuery","direction","fullWidth","height","OrderModal","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9ad953a.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\nimport { IOrder } from \"./../../../models/order\";\nimport { OrderListNames } from \"./../../../components/List/OrdersList\";\n\nexport enum OrderActions {\n  CREATE_NEW_ORDER = \"CREATE_NEW_ORDER\",\n  MAKE_IN_PREPARATION_ORDER = \"MAKE_IN_PREPARATION_ORDER\",\n  MAKE_DONE_ORDER = \"MAKE_DONE_ORDER\",\n  DELETE_ORDER = \"DELETE_ORDER\",\n  CHANGE_ORDER = \"CHANGE_ORDER\",\n  DRAG_ORDER = \"DRAG_ORDER\",\n}\n\nexport const createNewOrder = createAction<\n  IOrder | Omit<IOrder, \"id\" | \"date\">\n>(OrderActions.CREATE_NEW_ORDER);\n\nexport const makeOrderInPreparation = createAction<IOrder>(\n  OrderActions.MAKE_IN_PREPARATION_ORDER\n);\n\nexport const makeDoneOrder = createAction<IOrder>(OrderActions.MAKE_DONE_ORDER);\n\nexport const deleteOrder = createAction<IOrder>(OrderActions.DELETE_ORDER);\n\nexport const changeOrder = createAction<Omit<IOrder, \"id\" | \"date\">>(\n  OrderActions.CHANGE_ORDER\n);\n\nexport const dragOrder = createAction<OrderListNames>(OrderActions.DRAG_ORDER);\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"./../../store/index\";\nimport { IOrder } from \"./../../../models/order\";\n\nexport interface AppState {\n  isModal: boolean;\n  openedOrder: IOrder;\n  draggedOrder: IOrder;\n}\n\nconst initialState: AppState = {\n  isModal: false,\n  openedOrder: {} as IOrder,\n  draggedOrder: {} as IOrder,\n};\n\nconst appSlice = createSlice({\n  name: \"app\",\n  initialState,\n  reducers: {\n    setIsModal: (state, { payload }: PayloadAction<boolean>) => ({\n      ...state,\n      isModal: payload,\n    }),\n    setOpenedOrder: (state, { payload }: PayloadAction<IOrder>) => ({\n      ...state,\n      openedOrder: payload,\n      isModal: true,\n    }),\n    setDraggedOrder: (state, { payload }: PayloadAction<IOrder>) => ({\n      ...state,\n      draggedOrder: payload,\n    }),\n  },\n});\n\nexport const { setIsModal, setOpenedOrder, setDraggedOrder } = appSlice.actions;\n\nexport const selectApp = ({ app }: RootState) => app;\n\nexport default appSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { IOrder } from \"./../../../models/order\";\nimport { RootState } from \"./../../store/index\";\n\nexport interface OrderState {\n  orders: IOrder[];\n}\n\nconst initialState: OrderState = {\n  orders: [],\n};\n\nconst orderSlice = createSlice({\n  name: \"order\",\n  initialState,\n  reducers: {\n    setOrders: (state, { payload }: PayloadAction<IOrder[]>) => ({\n      ...state,\n      orders: payload,\n    }),\n  },\n});\n\nexport const { setOrders } = orderSlice.actions;\n\nexport const selectOrder = ({ order }: RootState) => order;\n\nexport default orderSlice.reducer;\n","export enum OrderStatus {\n  NEW = \"Nová\",\n  IN_PREPARATION = \"Připravováno\",\n  DONE = \"Hotovo\",\n}\n\nexport interface IOrder {\n  id: string;\n  name: string;\n  description: string;\n  city: string;\n  address: string;\n  date: string;\n  status: OrderStatus;\n}\n","import React, { FC } from \"react\";\nimport { Box, Grid, Paper } from \"@mui/material\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\";\nimport { dragOrder } from \"../../redux/reducers/order/actions\";\nimport { selectOrder } from \"../../redux/reducers/order\";\nimport { selectApp } from \"../../redux/reducers/app\";\nimport { OrderStatus } from \"../../models/order\";\nimport OneList from \"./OneList\";\nimport { styles } from \"./sx\";\n\nexport enum OrderListNames {\n  NEW = \"Nové\",\n  IN_PREPARATION = \"Připravováno\",\n  DONE = \"Hotovo\",\n}\n\nconst listStatusDictionary = {\n  [OrderListNames.NEW]: OrderStatus.NEW,\n  [OrderListNames.IN_PREPARATION]: OrderStatus.IN_PREPARATION,\n  [OrderListNames.DONE]: OrderStatus.DONE,\n};\n\ninterface OrderListProps {\n  isMedium: boolean;\n}\n\nconst OrdersList: FC<OrderListProps> = ({ isMedium }) => {\n  const { orders } = useAppSelector(selectOrder);\n  const { draggedOrder } = useAppSelector(selectApp);\n\n  const dispatch = useAppDispatch();\n\n  const dragOverHandler = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n  };\n\n  const dropOrderHandler = (\n    _: React.DragEvent<HTMLDivElement>,\n    list: OrderListNames\n  ) => {\n    if (listStatusDictionary[list] !== draggedOrder.status) {\n      dispatch(dragOrder(list));\n    }\n  };\n\n  if (isMedium) {\n    return (\n      <Box p={2}>\n        <Paper sx={styles.listPaprt}>\n          <Grid container>\n            <Grid\n              item\n              sx={styles.listGridItem}\n              onDragOver={dragOverHandler}\n              onDrop={(e) => dropOrderHandler(e, OrderListNames.NEW)}\n            >\n              <OneList\n                name={OrderListNames.NEW}\n                items={orders.filter(\n                  (order) => order.status === OrderStatus.NEW\n                )}\n                isMedium={isMedium}\n              />\n            </Grid>\n            <Grid\n              item\n              sx={styles.listGridItem}\n              onDragOver={dragOverHandler}\n              onDrop={(e) => dropOrderHandler(e, OrderListNames.IN_PREPARATION)}\n            >\n              <OneList\n                name={OrderListNames.IN_PREPARATION}\n                items={orders.filter(\n                  (order) => order.status === OrderStatus.IN_PREPARATION\n                )}\n                isMedium={isMedium}\n              />\n            </Grid>\n            <Grid\n              item\n              sx={styles.listGridItem}\n              onDragOver={dragOverHandler}\n              onDrop={(e) => dropOrderHandler(e, OrderListNames.DONE)}\n            >\n              <OneList\n                name={OrderListNames.DONE}\n                items={orders.filter(\n                  (order) => order.status === OrderStatus.DONE\n                )}\n                isMedium={isMedium}\n              />\n            </Grid>\n          </Grid>\n        </Paper>\n      </Box>\n    );\n  }\n\n  return (\n    <Swiper className=\"swiper\" spaceBetween={10}>\n      <SwiperSlide className=\"swiperSlide\">\n        <OneList\n          name={OrderListNames.NEW}\n          items={orders.filter((order) => order.status === OrderStatus.NEW)}\n          isMedium={isMedium}\n        />\n      </SwiperSlide>\n      <SwiperSlide className=\"swiperSlide\">\n        <OneList\n          name={OrderListNames.IN_PREPARATION}\n          items={orders.filter(\n            (order) => order.status === OrderStatus.IN_PREPARATION\n          )}\n          isMedium={isMedium}\n        />\n      </SwiperSlide>\n      <SwiperSlide className=\"swiperSlide\">\n        <OneList\n          name={OrderListNames.DONE}\n          items={orders.filter((order) => order.status === OrderStatus.DONE)}\n          isMedium={isMedium}\n        />\n      </SwiperSlide>\n    </Swiper>\n  );\n};\n\nexport default OrdersList;\n","import { IOrder, OrderStatus } from \"./../models/order\";\n\ninterface IErrors {\n  name: boolean;\n  description: boolean;\n  city: boolean;\n  address: boolean;\n  status: boolean;\n}\n\nexport class OrderService {\n  static setOrderStatus(order: IOrder, orders: IOrder[], status: OrderStatus) {\n    return orders.map((o) => {\n      if (o.id === order.id) {\n        return { ...order, status };\n      }\n      return o;\n    });\n  }\n  static getValidationErrors(inputs: Omit<IOrder, \"id\" | \"date\">) {\n    const errors = {\n      name: false,\n      description: false,\n      city: false,\n      address: false,\n      status: false,\n    };\n\n    for (const key in inputs) {\n      if (inputs[key as keyof Omit<IOrder, \"id\" | \"date\">] === \"\") {\n        errors[key as keyof IErrors] = true;\n      }\n    }\n\n    return errors;\n  }\n}\n","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/store/index\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../redux/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import React, { FC } from \"react\";\nimport { Avatar } from \"@mui/material\";\nimport FiberNewOutlinedIcon from \"@mui/icons-material/FiberNewOutlined\";\nimport AutorenewOutlinedIcon from \"@mui/icons-material/AutorenewOutlined\";\nimport DoneOutlineOutlinedIcon from \"@mui/icons-material/DoneOutlineOutlined\";\nimport { green, red, yellow } from \"@mui/material/colors\";\nimport { OrderStatus } from \"../../models/order\";\n\ninterface OrderListItemAvatarProps {\n  status: OrderStatus;\n}\n\nconst OrderListItemAvatar: FC<OrderListItemAvatarProps> = ({ status }) => {\n  if (status === OrderStatus.NEW) {\n    return (\n      <Avatar variant=\"rounded\" sx={{ bgcolor: red[100] }}>\n        <FiberNewOutlinedIcon />\n      </Avatar>\n    );\n  } else if (status === OrderStatus.IN_PREPARATION) {\n    return (\n      <Avatar variant=\"rounded\" sx={{ bgcolor: yellow[100] }}>\n        <AutorenewOutlinedIcon />\n      </Avatar>\n    );\n  }\n  return (\n    <Avatar variant=\"rounded\" sx={{ bgcolor: green[100] }}>\n      <DoneOutlineOutlinedIcon />\n    </Avatar>\n  );\n};\n\nexport default OrderListItemAvatar;\n","import { SxProps, Theme } from \"@mui/system\";\n\nexport const styles: { [key: string]: SxProps<Theme> } = {\n  listItem: {\n    pr: \"16px\",\n    zIndex: 10,\n    // order item content\n    \".MuiListItemButton-root\": { width: \"100%\", pr: 0 },\n    // order date\n    \".MuiListItemText-secondary\": {\n      fontSize: \"12px\",\n      \"@media (min-width: 360px)\": { fontSize: \"13px\" },\n      \"@media (min-width: 411px)\": { fontSize: \"14px\" },\n    },\n    // button box\n    \".MuiListItemSecondaryAction-root\": {\n      display: \"flex\",\n      justifyContent: \"end\",\n      flex: \"1 0\",\n      transform: \"none\",\n      WebkitTransform: \"none\",\n      position: \"static\",\n    },\n  },\n  iconButton: {\n    mr: \"0px\",\n  },\n};\n","import React, { FC } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FiberNewOutlinedIcon from \"@mui/icons-material/FiberNewOutlined\";\nimport AutorenewOutlinedIcon from \"@mui/icons-material/AutorenewOutlined\";\nimport DoneOutlineOutlinedIcon from \"@mui/icons-material/DoneOutlineOutlined\";\nimport DeleteOutlineOutlinedIcon from \"@mui/icons-material/DeleteOutlineOutlined\";\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\";\nimport {\n  createNewOrder,\n  deleteOrder,\n  makeDoneOrder,\n  makeOrderInPreparation,\n} from \"../../redux/reducers/order/actions\";\nimport { IOrder, OrderStatus } from \"../../models/order\";\nimport { styles } from \"./sx\";\n\ninterface OrderListIconButtonProps {\n  order: IOrder;\n}\n\nconst OrderListIconButton: FC<OrderListIconButtonProps> = ({ order }) => {\n  const dispatch = useAppDispatch();\n\n  if (order.status === OrderStatus.NEW) {\n    return (\n      <IconButton\n        edge=\"end\"\n        onClick={() => dispatch(makeOrderInPreparation(order))}\n      >\n        <AutorenewOutlinedIcon />\n      </IconButton>\n    );\n  } else if (order.status === OrderStatus.IN_PREPARATION) {\n    return (\n      <>\n        <IconButton\n          edge=\"end\"\n          onClick={() => dispatch(createNewOrder(order))}\n          sx={styles.iconButton}\n        >\n          <FiberNewOutlinedIcon />\n        </IconButton>\n        <IconButton edge=\"end\" onClick={() => dispatch(makeDoneOrder(order))}>\n          <DoneOutlineOutlinedIcon />\n        </IconButton>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <IconButton\n          edge=\"end\"\n          onClick={() => dispatch(makeOrderInPreparation(order))}\n          sx={styles.iconButton}\n        >\n          <AutorenewOutlinedIcon />\n        </IconButton>\n        <IconButton edge=\"end\" onClick={() => dispatch(deleteOrder(order))}>\n          <DeleteOutlineOutlinedIcon />\n        </IconButton>\n      </>\n    );\n  }\n};\n\nexport default OrderListIconButton;\n","import React, { FC } from \"react\";\nimport {\n  ListItem,\n  ListItemAvatar,\n  ListItemButton,\n  ListItemText,\n} from \"@mui/material\";\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\";\nimport { setDraggedOrder, setOpenedOrder } from \"../../redux/reducers/app\";\nimport { IOrder } from \"../../models/order\";\nimport OrderListItemAvatar from \"./OrderListItemAvatar\";\nimport OrderListIconButton from \"./OrderListIconButton\";\nimport { styles } from \"./sx\";\n\ninterface OrderListItemProps {\n  order: IOrder;\n  isMedium: boolean;\n}\n\nconst OrderListItem: FC<OrderListItemProps> = ({ order, isMedium }) => {\n  const dispatch = useAppDispatch();\n\n  const dragStartHandler = (\n    _: React.DragEvent<HTMLLIElement>,\n    item: IOrder\n  ) => {\n    dispatch(setDraggedOrder(item));\n  };\n\n  const dragOverHandler = (e: React.DragEvent<HTMLLIElement>) => {\n    e.preventDefault();\n  };\n\n  const dragHandler = (e: React.DragEvent<HTMLLIElement>) => {\n    e.preventDefault();\n  };\n\n  return (\n    <ListItem\n      disablePadding\n      secondaryAction={<OrderListIconButton order={order} />}\n      draggable={isMedium}\n      onDragStart={(e) => dragStartHandler(e, order)}\n      onDragOver={dragOverHandler}\n      onDrag={dragHandler}\n      sx={styles.listItem}\n    >\n      <ListItemButton onClick={() => dispatch(setOpenedOrder(order))}>\n        <ListItemAvatar>\n          <OrderListItemAvatar status={order.status} />\n        </ListItemAvatar>\n        <ListItemText primary={order.name} secondary={order.date} />\n      </ListItemButton>\n    </ListItem>\n  );\n};\n\nexport default OrderListItem;\n","import { SxProps, Theme } from \"@mui/system\";\n\nexport const styles: { [key: string]: SxProps<Theme> } = {\n  // one list style\n  listSubheader: {\n    fontSize: \"18px\",\n    \"@media (min-width: 411px)\": { fontSize: \"20px\" },\n  },\n  // whole list style\n  listPaper: { width: \"100%\" },\n  listGridItem: {\n    flex: \"1 0\",\n    borderRight: \"solid 1px rgb(0, 0, 0, 0.35)\",\n    \"&:last-child\": { borderRight: \"none\" },\n  },\n};\n","import React, { FC } from \"react\";\nimport { List, ListSubheader, Paper } from \"@mui/material\";\nimport { IOrder } from \"../../models/order\";\nimport OrderListItem from \"../ListItem/OrderListItem\";\nimport { styles } from \"./sx\";\n\ninterface OneListProps {\n  name: string;\n  items: IOrder[];\n  isMedium: boolean;\n}\n\nconst OneList: FC<OneListProps> = ({ name, items, isMedium }) => {\n  return (\n    <Paper square elevation={isMedium ? 0 : 3}>\n      <List>\n        <ListSubheader sx={styles.listSubheader}>{name}</ListSubheader>\n        {items.map((item) => (\n          <OrderListItem key={item.id} order={item} isMedium={isMedium} />\n        ))}\n      </List>\n    </Paper>\n  );\n};\n\nexport default OneList;\n","import { put, select, StrictEffect, takeEvery } from \"@redux-saga/core/effects\";\nimport { PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  changeOrder,\n  createNewOrder,\n  deleteOrder,\n  dragOrder,\n  makeDoneOrder,\n  makeOrderInPreparation,\n  OrderActions,\n} from \"./../../reducers/order/actions\";\nimport { selectApp } from \"./../../reducers/app/index\";\nimport {\n  OrderState,\n  selectOrder,\n  setOrders,\n} from \"./../../reducers/order/index\";\nimport { IOrder, OrderStatus } from \"./../../../models/order\";\nimport { OrderService } from \"./../../../services/order\";\nimport { OrderListNames } from \"./../../../components/List/OrdersList\";\n\nfunction* handleOrderDrag({ payload }: PayloadAction<OrderListNames>) {\n  const { draggedOrder } = yield select(selectApp);\n\n  switch (payload) {\n    case OrderListNames.NEW:\n      yield put(createNewOrder(draggedOrder));\n      break;\n\n    case OrderListNames.IN_PREPARATION:\n      yield put(makeOrderInPreparation(draggedOrder));\n      break;\n\n    case OrderListNames.DONE:\n      yield put(makeDoneOrder(draggedOrder));\n      break;\n  }\n}\n\nfunction* handleOrderChange({\n  payload,\n}: PayloadAction<Omit<IOrder, \"id\" | \"date\">>) {\n  const { openedOrder } = yield select(selectApp);\n\n  const changedOrder = {\n    ...payload,\n    id: openedOrder.id,\n    date: openedOrder.date,\n  };\n\n  switch (payload.status) {\n    case OrderStatus.NEW:\n      yield put(createNewOrder(changedOrder));\n      break;\n\n    case OrderStatus.IN_PREPARATION:\n      yield put(makeOrderInPreparation(changedOrder));\n      break;\n\n    case OrderStatus.DONE:\n      yield put(makeDoneOrder(changedOrder));\n      break;\n  }\n}\n\nfunction* handleOrder({\n  type,\n  payload,\n}: PayloadAction<IOrder | Omit<IOrder, \"id\" | \"date\">>): Generator<\n  StrictEffect,\n  void,\n  OrderState\n> {\n  const { orders } = yield select(selectOrder);\n\n  if (\"id\" in payload && \"date\" in payload) {\n    switch (type) {\n      case OrderActions.CREATE_NEW_ORDER:\n        yield put(\n          setOrders(\n            OrderService.setOrderStatus(payload, orders, OrderStatus.NEW)\n          )\n        );\n        break;\n      case OrderActions.MAKE_IN_PREPARATION_ORDER:\n        yield put(\n          setOrders(\n            OrderService.setOrderStatus(\n              payload,\n              orders,\n              OrderStatus.IN_PREPARATION\n            )\n          )\n        );\n        break;\n      case OrderActions.MAKE_DONE_ORDER:\n        yield put(\n          setOrders(\n            OrderService.setOrderStatus(payload, orders, OrderStatus.DONE)\n          )\n        );\n        break;\n      case OrderActions.DELETE_ORDER:\n        yield put(setOrders(orders.filter((order) => order.id !== payload.id)));\n    }\n  } else {\n    yield put(\n      setOrders([\n        ...orders,\n        {\n          ...payload,\n          id: new Date().getTime().toString(),\n          date: new Date().toLocaleString(),\n        },\n      ])\n    );\n  }\n}\n\nexport default function* orderSaga() {\n  yield takeEvery(\n    [createNewOrder, makeOrderInPreparation, makeDoneOrder, deleteOrder],\n    handleOrder\n  );\n  yield takeEvery(changeOrder, handleOrderChange);\n  yield takeEvery(dragOrder, handleOrderDrag);\n}\n","import { all, call, spawn } from \"redux-saga/effects\";\nimport orderSaga from \"./order\";\n\nexport default function* rootSaga() {\n  const sagas = [orderSaga];\n\n  yield all(\n    sagas.map((saga) =>\n      spawn(function* () {\n        while (true) {\n          try {\n            yield call(saga);\n            break;\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      })\n    )\n  );\n}\n","import createSagaMiddleware from \"redux-saga\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport app from \"../reducers/app\";\nimport order from \"../reducers/order\";\nimport rootSaga from \"../sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = configureStore({\n  reducer: {\n    app,\n    order,\n  },\n  middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","export const cities = [\n  \"Praha\",\n  \"Brno\t\",\n  \"Ostrava\t\",\n  \"Plzeň\t\",\n  \"Liberec\t\",\n  \"Olomouc\t\",\n  \"České Budějovice\",\n  \"Hradec Králové\",\n  \"Ústí nad Labem\",\n  \"Pardubice\t\",\n  \"Zlín\t\",\n  \"Havířov\t\",\n  \"Kladno\",\n  \"Most\t\",\n  \"Opava\t\",\n  \"Frýdek-Místek\t\",\n  \"Jihlava\t\",\n  \"Karviná\t\",\n  \"Teplice\t\",\n  \"Chomutov\t\",\n  \"Karlovy Vary\t\",\n  \"Děčín\t\",\n  \"Jablonec nad Nisou\t\",\n  \"Mladá Boleslav\t\",\n  \"Prostějov\t\",\n  \"Přerov\",\n];\n","import { SxProps, Theme } from \"@mui/system\";\n\nexport const styles: { [key: string]: SxProps<Theme> } = {\n  modalBox: {\n    bgcolor: \"background.paper\",\n    border: \"1px solid black\",\n    boxShadow: 24,\n    transform: \"translate(-50%, -50%)\",\n    width: \"86%\",\n    maxWidth: 1000,\n    p: 4,\n    position: \"absolute\" as \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n  },\n  header: { fontSize: \"22px\", textAlign: \"center\", mb: \"10px\" },\n  form: { display: \"flex\", flexWrap: \"wrap\", justifyContent: \"space-between\" },\n  input: {\n    flexBasis: \"100%\",\n    \"@media (min-width: 768px)\": { flexBasis: \"49%\" },\n  },\n  select: {\n    flexBasis: \"100%\",\n    \"@media (min-width: 768px)\": {\n      flexBasis: \"49%\",\n    },\n  },\n  statusSelect: {\n    flexBasis: \"100%\",\n  },\n  button: {\n    flexBasis: \"100%\",\n    \"&:first-of-type\": { my: 1, \"@media (min-width: 768px)\": { mt: \"20px\" } },\n  },\n  deleteButton: {\n    flexBasis: \"100%\",\n    mb: 1,\n  },\n};\n","import React, { ChangeEvent, FC, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Modal,\n  Select,\n  SelectChangeEvent,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\";\nimport {\n  selectApp,\n  setIsModal,\n  setOpenedOrder,\n} from \"../../redux/reducers/app\";\nimport {\n  changeOrder,\n  createNewOrder,\n  deleteOrder,\n} from \"../../redux/reducers/order/actions\";\nimport { IOrder, OrderStatus } from \"../../models/order\";\nimport { cities } from \"../../data/cities\";\nimport { styles } from \"./sx\";\nimport { OrderService } from \"../../services/order\";\nimport { hasEmptyProperty } from \"../../utils/hasEmptyProperty\";\n\nconst CreateOrderModal: FC = () => {\n  const { isModal, openedOrder } = useAppSelector(selectApp);\n\n  const dispatch = useAppDispatch();\n\n  const [inputs, setInputs] = useState({\n    name: openedOrder.name ?? \"\",\n    description: openedOrder.description ?? \"\",\n    city: openedOrder.city ?? \"\",\n    address: openedOrder.address ?? \"\",\n    status: openedOrder.status ?? OrderStatus.NEW,\n  });\n\n  const [errors, setErrors] = useState({\n    name: false,\n    description: false,\n    city: false,\n    address: false,\n    status: false,\n  });\n\n  const handleChange = (\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | SelectChangeEvent\n  ) => {\n    setErrors({\n      name: false,\n      description: false,\n      city: false,\n      address: false,\n      status: false,\n    });\n\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (hasEmptyProperty(inputs)) {\n      return setErrors(OrderService.getValidationErrors(inputs));\n    }\n\n    if (!openedOrder.id) {\n      dispatch(createNewOrder(inputs));\n    } else {\n      dispatch(changeOrder(inputs));\n    }\n\n    handleModalClose();\n  };\n\n  const handleModalClose = () => {\n    if (openedOrder) {\n      dispatch(setOpenedOrder({} as IOrder));\n    }\n    dispatch(setIsModal(false));\n  };\n\n  return (\n    <Modal open={isModal} onClose={handleModalClose}>\n      <Box sx={styles.modalBox}>\n        <Typography variant=\"h3\" sx={styles.header}>\n          {openedOrder.name ?? \"Nová objednávka\"}\n        </Typography>\n        <form\n          onSubmit={handleSubmit}\n          style={styles.form as React.CSSProperties}\n        >\n          <TextField\n            error={errors.name}\n            name=\"name\"\n            label=\"Name\"\n            margin=\"dense\"\n            value={inputs.name}\n            onChange={handleChange}\n            sx={styles.input}\n          />\n          <TextField\n            error={errors.description}\n            name=\"description\"\n            label=\"Description\"\n            multiline\n            maxRows={4}\n            margin=\"dense\"\n            value={inputs.description}\n            onChange={handleChange}\n            sx={styles.input}\n          />\n          <FormControl margin=\"dense\" sx={styles.select}>\n            <InputLabel htmlFor=\"city\">City</InputLabel>\n            <Select\n              error={errors.city}\n              id=\"city\"\n              name=\"city\"\n              label=\"City\"\n              value={inputs.city}\n              onChange={handleChange}\n            >\n              <MenuItem value=\"\">\n                <em>None</em>\n              </MenuItem>\n              {cities.map((city) => (\n                <MenuItem key={city} value={city}>\n                  {city}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <TextField\n            error={errors.address}\n            name=\"address\"\n            label=\"Address\"\n            multiline\n            maxRows={2}\n            margin=\"dense\"\n            value={inputs.address}\n            onChange={handleChange}\n            sx={styles.input}\n          />\n          {openedOrder.id && (\n            <FormControl margin=\"dense\" sx={styles.statusSelect}>\n              <InputLabel htmlFor=\"status\">Status</InputLabel>\n              <Select\n                error={errors.status}\n                id=\"status\"\n                name=\"status\"\n                label=\"Status\"\n                value={inputs.status}\n                onChange={handleChange}\n              >\n                <MenuItem value=\"\">\n                  <em>{openedOrder.status}</em>\n                </MenuItem>\n                {Object.values(OrderStatus).map((status) => (\n                  <MenuItem key={status} value={status}>\n                    {status}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          )}\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            size=\"large\"\n            sx={styles.button}\n          >\n            {openedOrder.id ? \"Change\" : \"Create\"}\n          </Button>\n          {openedOrder.id && (\n            <Button\n              color=\"error\"\n              variant=\"contained\"\n              type=\"submit\"\n              size=\"large\"\n              onClick={() => dispatch(deleteOrder(openedOrder))}\n              sx={styles.deleteButton}\n            >\n              Delete\n            </Button>\n          )}\n          <Button\n            variant=\"outlined\"\n            size=\"large\"\n            onClick={handleModalClose}\n            sx={styles.button}\n          >\n            Cancel\n          </Button>\n        </form>\n      </Box>\n    </Modal>\n  );\n};\n\nexport default CreateOrderModal;\n","export function hasEmptyProperty(obj: { [key: string]: any }) {\n  for (const key in obj) {\n    if (!obj[key]) {\n      return true;\n    }\n  }\n  return false;\n}\n","import React, { FC } from \"react\";\nimport { Button, Box, Grid, useMediaQuery } from \"@mui/material\";\nimport { useAppSelector } from \"./hooks/useAppSelector\";\nimport { useAppDispatch } from \"./hooks/useAppDispatch\";\nimport { selectApp, setIsModal } from \"./redux/reducers/app\";\nimport OrdersList from \"./components/List/OrdersList\";\nimport OrderModal from \"./components/Modals/OrderModal\";\n\nconst App: FC = () => {\n  const { isModal } = useAppSelector(selectApp);\n\n  const dispatch = useAppDispatch();\n\n  const isSmall = useMediaQuery(\"(min-width: 360px)\");\n  const isMedium = useMediaQuery(\"(min-width: 500px)\");\n\n  return (\n    <Grid container direction=\"column\" maxWidth={1300}>\n      <Box p={2}>\n        <Button\n          fullWidth\n          variant=\"contained\"\n          size={isSmall ? \"large\" : \"medium\"}\n          onClick={() => dispatch(setIsModal(true))}\n          sx={{\n            \"@media (min-width: 411px)\": { fontSize: \"18px\", height: \"60px\" },\n          }}\n        >\n          Vytvořit novou objednávku\n        </Button>\n      </Box>\n      {isModal && <OrderModal />}\n      <OrdersList isMedium={isMedium} />\n    </Grid>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}